import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;


  bfs탐색
 
public class Main {
	static int map[][];
	static boolean visit[][][];
	static int k, w, h;
	static int dy[] = { -1, 1, 0, 0 };
	static int dx[] = { 0, 0, -1, 1 };
	static int ty[] = { -1, -2, -2, -1, 1, 2, 2, 1 };
	static int tx[] = { -2, -1, 1, 2, -2, -1, 1, 2 };
	static int ans;
	static Queueint[] q;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		k = sc.nextInt();
		w = sc.nextInt();
		h = sc.nextInt();
		map = new int[h][w];
		 visit[k + 1][y][x]를 사용하였는데 이 배열의 의미는 (y,x)지점에 능력을 k번 사용해서 왔습니다
		visit = new boolean[k + 1][h][w];
		for (int i = 0; i  h; i++) {
			for (int j = 0; j  w; j++) {
				map[i][j] = sc.nextInt();
			}
		}
		q = new LinkedListint[]();
		ans = Integer.MAX_VALUE;

		move();

		if (ans == Integer.MAX_VALUE)
			System.out.println(-1);
		else
			System.out.println(ans);

	}

	private static void move() {
		q.offer(new int[] { 0, 0, 0, 0 });
		visit[k][0][0] = true;
		while (!q.isEmpty()) {
			int[] cur = q.poll();
			int y = cur[0];
			int x = cur[1];
			int cnt = cur[2];
			int use = cur[3];
			if (y == h - 1 && x == w - 1) {
				ans = Math.min(ans, cnt);
				return;
			}
			 근데 아직 말처럼 뛸수도 있다면
			if (use  k) {
				for (int d = 0; d  8; d++) {
					int ny = y + ty[d];
					int nx = x + tx[d];
					if (check(ny, nx) && map[ny][nx] == 0 && !visit[use+1][ny][nx]) {
						visit[use+1][ny][nx] = true;
						q.offer(new int[] { ny, nx, cnt + 1, use + 1 });
					}
				}
			}
			 4방향으로 이동
			for (int d = 0; d  4; d++) {
				int ny = y + dy[d];
				int nx = x + dx[d];
				if (check(ny, nx) && map[ny][nx] == 0 && !visit[use][ny][nx]) {
					visit[use][ny][nx] = true;
					q.offer(new int[] { ny, nx, cnt + 1, use });
				}
			}

		}
	}

	private static boolean check(int ny, int nx) {
		 TODO Auto-generated method stub
		if (ny = 0 && nx = 0 && ny  h && nx  w) {
			return true;
		}
		return false;
	}
}
