import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
/*
 * 
 * 어려움
 * bfs + permu(순열)
 * 각 먼지들 사이의 거리를 bfs를 통해 구하여 이차원배열에 저장
 * graph[i][j] => i에서 i까지의 거리 길이를 저장
 * 순열을 통해 0,1,2,3 or 0,2,1,3 전체 순서를 돌려봐서
 * 가장 작은 길이를 구하여 정답을 구함
 * bfs를 통해 길이를 구할때 갈수 없는 먼지가 존재할 경우 -1리턴하고 넘어감 
 */
public class Main{
	static boolean visit[][];
	static char map[][];
	static int dy[] = { -1, 1, 0, 0 };
	static int dx[] = { 0, 0, -1, 1 };
	static int r, c;
	static int ans;
	static int count;
	static Queue<point> q;

	static class point {
		int y;
		int x;
		int d;

		public point(int y, int x, int d) {
			super();
			this.y = y;
			this.x = x;
			this.d = d;
		}
	}

	static int[][] graph;
	static point[] dirty;
	static point start;
	static int size;
	static int res;

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		while (true) {
			r = sc.nextInt();
			c = sc.nextInt();
			if (r == 0 && c == 0) {
				break;
			}
			dirty = new point[11];
			res = Integer.MAX_VALUE;
			size = 1;
			map = new char[c][r];
			ans = 0;
			for (int i = 0; i < c; i++) {
				String s = sc.next();
				for (int j = 0; j < s.length(); j++) {
					map[i][j] = s.charAt(j);
					if (map[i][j] == 'o') {
						start = new point(i, j, 0);
					} else if (map[i][j] == '*') {
						dirty[size++] = new point(i, j, 0);
					}
				}
			}
			dirty[0] = start;
			graph = new int[size][size];

			// 각 먼지들끼리의 이동길이 구하기
			// graph[i][j] = i에서 j까지의 거리
			boolean check = true;
			check = solve();
			if (!check)
				continue;
			
			boolean[]select = new boolean[size];
			int[]list = new int[size];
			select[0] = true;
			list[0] =0;
			permu(select,list,1);
			System.out.println(res);
		}

	}

	private static void permu(boolean[] select, int[] list, int idx) {
		// TODO Auto-generated method stub
		if(idx == size) {
			int sum = 0;
			for (int i = 0; i < size-1; i++) {
				sum += graph[list[i]][list[i+1]];
			}
			res = Math.min(res, sum);
			return;
		}
		for (int i = 0; i < size; i++) {
			if(!select[i]) {
				select[i] = true;
				list[idx] = i;
				permu(select,list,idx+1);
				select[i] = false;
			}
		}
	}

	private static boolean solve() {
		// TODO Auto-generated method stub
		for (int i = 0; i < size - 1; i++) {
			for (int j = i + 1; j < size; j++) {
				int len = bfs(dirty[i], dirty[j]);
				if (len == -1) {
					System.out.println(-1);
					return false;
				}
				graph[i][j] = len;
				graph[j][i] = len;

			}
		}
		return true;
	}

	private static boolean check() {
		// TODO Auto-generated method stub
		for (int i = 0; i < c; i++) {
			for (int j = 0; j < r; j++) {
				if (map[i][j] == '*')
					return false;
			}
		}
		return true;
	}

	private static int bfs(point start, point end) {
		// TODO Auto-generated method stub
		q = new LinkedList<>();
		visit = new boolean[c][r];
		visit[start.y][start.x] = true;
		q.offer(new point(start.y, start.x, 0));
		while (!q.isEmpty()) {
			point cur = q.poll();
			int y = cur.y;
			int x = cur.x;
			int cnt = cur.d;
			for (int d = 0; d < 4; d++) {
				int ny = y + dy[d];
				int nx = x + dx[d];
				if (ny >= 0 && nx >= 0 && ny < c && nx < r 
						&& !visit[ny][nx] && map[ny][nx] != 'x') {
					if (ny == end.y && nx == end.x) {
						return cnt + 1;
					}
					visit[ny][nx] = true;
					q.offer(new point(ny, nx, cnt + 1));
				}

			}
		}
		return -1;
	}
}
